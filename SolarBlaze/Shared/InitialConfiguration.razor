@using System.ComponentModel.DataAnnotations
@using System.Net
@using Blazored.LocalStorage
@using SolarBlaze.Config
@using SolarBlaze.Services.MqttSqliteApi

@inject HttpClient Client
@inject ILocalStorageService localStorage

<div>
    <h1>Initial Configuration</h1>
    <hr />

    <div class="container" style="padding-top: 30vh;">
        <div class="row">
            <div class="col-sm"></div>
            <div class="col-sm">
                <EditForm @ref="@Context" class="initial-config-form" Model="@Model" OnValidSubmit="@SubmitValid" OnInvalidSubmit="@SubmitInvalid">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Model.Email" type="email" class="form-control" id="FloatingEmailInput" placeholder="name@example.com" disabled="@Submitting" />
                        <label for="FloatingEmailInput">Email address</label>
                    </div>
                    
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Model.ServerUrl" type="url" class="form-control" id="FloatingUrlInput" placeholder="http://example.com" disabled="@Submitting" />
                        <label for="FloatingUrlInput">Data Server Url</label>
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" disabled="@Submitting">
                            Submit_
                            @if (Submitting)
                            {
                                <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span>
                            }
                        </button>
                    </div>

                    <DataAnnotationsValidator/>
                </EditForm>
                
                <TextLog @ref="Log" />
            </div>
            <div class="col-sm"></div>
        </div>
    </div>
</div>

@code
{
    private EditForm? Context;
    private FormModel Model = new();

    [EditorRequired]
    [Parameter]
    public MainLayout Parent { get; set; } = null!;

    private bool Submitting { get; set; }
    TextLog? Log { get; set; } = null!;

    private async Task SubmitValid()
    {
        Submitting = true;

        Log!.Clear();
        Log.Log($"Establishing Connection {Model.ServerUrl!}");
        await Task.Delay(55);

        var client = new MqttSqliteApiClient(Model.ServerUrl!, Client);
        await Task.Delay(55);

        var healthy = await client.HealthCheck();
        if (!healthy)
        {
            Log.Log("Connection Failure", replace: -1);
            Log.Log("Server Unreachable!");
            Submitting = false;

            // Set URL field to null and revalidate, this will mark the field as invalid
            var ctx = Context?.EditContext;
            if (ctx != null)
            {
                var url = Model.ServerUrl;
                Model.ServerUrl = null;
                ctx.NotifyFieldChanged(ctx.Field(nameof(FormModel.ServerUrl)));
                Context!.EditContext!.Validate();
                Model.ServerUrl = url;
            }

            return;
        }

        Log.Log("Connection Established", replace: -1);
        await Task.Delay(95);

        Log.Log("Serializing Application State");
        await Task.Delay(185);

        var state = new InitialSetup(Model.Email!, Model.ServerUrl!);
        await localStorage.SetItemAsync("InitialSetup", state);
        Log.Log("Serialized Application State", replace: -1);
        await Task.Delay(99);

        Log.Log("Reloading Application");
        await Task.Delay(755);

        await Parent.Refresh();
    }

    private async Task SubmitInvalid()
    {
        Log!.Clear();
        Log.Log("Invalid Submission");
        await Task.Delay(199);

        foreach (var message in Context?.EditContext?.GetValidationMessages() ?? Array.Empty<string>())
        {
            Log.Log($"{message}");
            await Task.Delay(55);
        }
    }

    public class FormModel
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [Url]
        public string? ServerUrl { get; set; }
    }
}
