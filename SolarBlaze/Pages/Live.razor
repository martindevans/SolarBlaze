@page "/live"
@using SolarBlaze.Config
@using SolarBlaze.Extensions
@using SolarBlaze.Services.MqttSqliteApi

@inject HttpClient Client

<PageTitle>Live Data</PageTitle>

<h1>Live Status</h1>


@if (FetchError)
{
    <p><em>Network Error</em></p>
}
else
{
    <CascadingValue Value="@DataContainer">
        <DataPointDisplay Topic="Topic.PowerPV" />
        <DataPointDisplay Topic="Topic.PowerCharge" />
        <DataPointDisplay Topic="Topic.PowerToUser" />
        <DataPointDisplay Topic="Topic.PowerToGrid" />
        <DataPointDisplay Topic="Topic.PowerDischarge" />
        <DataPointDisplay Topic="Topic.StateOfCharge" />
    </CascadingValue>

    <Countdown @ref="@Countdown" TimerOut="@Update" />
}

@code
{
    [CascadingParameter]
    public InitialSetup InitialSetup { get; private set; } = null!;

    public Countdown? Countdown { get; set; }

    public TopicContainer? DataContainer { get; set; }
    public bool FetchError { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        await Update();
        StateHasChanged();
    }

    private async Task Update()
    {
        var client = new MqttSqliteApiClient(InitialSetup.ServerUrl, Client);
        var response = await client.FetchLatestEvent(Topic.PowerPV | Topic.PowerCharge | Topic.PowerToUser | Topic.PowerToGrid | Topic.PowerDischarge | Topic.StateOfCharge);

        if (!response.IsError)
        {
            DataContainer = response.Data;

            // Calculate how long until the next data is available (assuming a refresh every 5 minutes)
            var age = TimeSpan.FromSeconds(DateTime.UtcNow.ToUnixTimeSeconds() - DataContainer.Topics.First().Value.TimeStamp);
            var nextRefresh = TimeSpan.FromMinutes(5) - age;
            Countdown?.SetDuration(nextRefresh);
            Console.WriteLine(nextRefresh.TotalSeconds);
        }
        else
        {
            FetchError = true;
        }

        StateHasChanged();
    }
}
